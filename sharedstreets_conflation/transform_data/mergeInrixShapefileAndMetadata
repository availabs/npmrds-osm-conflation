#!/usr/bin/env node

/* eslint no-cond-assign: 0 */

const yargs = require('yargs');
const LineByLine = require('n-readlines');

const cliArgsSpec = {
  inrixMetadata: {
    demand: true,
    type: 'string'
  },
  inrixShapes: {
    demand: true,
    type: 'string'
  }
};

const { argv } = yargs
  .strict()
  .parserConfiguration({
    'camel-case-expansion': false,
    'flatten-duplicate-arrays': false
  })
  .wrap(yargs.terminalWidth() / 1.618)
  .option(cliArgsSpec);

const { inrixShapes, inrixMetadata } = argv;

const inrixMetadataByTmc = {};

const inrixMetadataLineReader = new LineByLine(inrixMetadata);
let metaLine;

while ((metaLine = inrixMetadataLineReader.next())) {
  const metadata = JSON.parse(metaLine);

  const { tmc } = metadata;

  inrixMetadataByTmc[tmc] = metadata;
}
// ---------------------------------------------------------------------------

const inrixShapeLineReader = new LineByLine(inrixShapes);
let shpLine;

// ---- Main Loop ------------------------------------
while ((shpLine = inrixShapeLineReader.next())) {
  const geoJsonFeature = JSON.parse(shpLine);
  const {
    properties: { tmc }
  } = geoJsonFeature;

  const metadata = inrixMetadataByTmc[tmc];
  Object.assign(geoJsonFeature.properties, metadata);

  console.log(JSON.stringify(geoJsonFeature));
}
