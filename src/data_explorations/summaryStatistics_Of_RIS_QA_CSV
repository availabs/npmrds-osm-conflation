#!/usr/bin/env node

const { pipe, through } = require('mississippi');
const csv = require('fast-csv');
const _ = require('lodash');
const ss = require('simple-statistics');

const stats = {
  total: 0,
  total_mi: 0,
  total_paired: 0,
  total_paired_mi: 0,
  len_diff_ratios: [],
  lengths: []
};

pipe(
  process.stdin,
  csv.parse({ headers: true, trim: true }),
  through.obj(
    async function loader(tmc_qa, $, cb) {
      const {
        shp_length,
        is_paired,
        oneway_len_diff_ratio,
        twoway_len_diff_ratio
      } = tmc_qa;

      ++stats.total;
      stats.total_mi += +shp_length;

      if (is_paired === 'true') {
        ++stats.total_paired;
        stats.total_paired_mi += +shp_length;
        const len_diff_ratio = Math.min(
          Math.abs(+oneway_len_diff_ratio),
          Math.abs(+twoway_len_diff_ratio)
        );
        if (Number.isFinite(+len_diff_ratio)) {
          stats.len_diff_ratios.push(+len_diff_ratio);
          stats.lengths.push(+shp_length);
        }
      }
      return cb();
    },
    function output() {
      const {
        total,
        total_mi,
        total_paired,
        total_paired_mi,
        len_diff_ratios,
        lengths
      } = stats;

      const pct_paired_mi = _.round((total_paired_mi / total_mi) * 100, 2);

      const abs_len_diff_ratios = _.sortBy(
        len_diff_ratios.map(n => Math.abs(n)),
        _.toNumber
      );

      const pct_paired = _.round((total_paired / total) * 100, 2);

      const mean_len_diff_ratio = _.round(ss.mean(abs_len_diff_ratios), 4);

      const len_diff_ratio_stddev = _.round(
        ss.standardDeviation(abs_len_diff_ratios),
        4
      );
      const median_len_diff_ratio = _.round(
        ss.medianSorted(abs_len_diff_ratios),
        4
      );

      const passing_5pct = abs_len_diff_ratios.reduce(
        (acc, len_diff_ratio) => acc + (len_diff_ratio <= 0.05 ? 1 : 0),
        0
      );

      const passing_5pct_mi = abs_len_diff_ratios.reduce(
        (acc, len_diff_ratio, i) =>
          acc + (len_diff_ratio <= 0.05 ? lengths[i] : 0),
        0
      );

      const passing_10pct = abs_len_diff_ratios.reduce(
        (acc, len_diff_ratio) => acc + (len_diff_ratio <= 0.1 ? 1 : 0),
        0
      );

      const passing_10pct_mi = abs_len_diff_ratios.reduce(
        (acc, len_diff_ratio, i) =>
          acc + (len_diff_ratio <= 0.1 ? lengths[i] : 0),
        0
      );

      const pct_passing_5pct = _.round(passing_5pct / total_paired, 4);
      const pct_passing_5pct_mi = _.round(passing_5pct_mi / total_paired_mi, 4);

      const pct_passing_10pct = _.round(passing_10pct / total_paired, 4);
      const pct_passing_10pct_mi = _.round(
        passing_10pct_mi / total_paired_mi,
        4
      );

      this.push({
        total,
        total_mi: _.round(total_mi, 4),
        pct_paired,
        pct_paired_mi,
        mean_len_diff_ratio,
        len_diff_ratio_stddev,
        median_len_diff_ratio,
        pct_passing_5pct,
        pct_passing_5pct_mi,
        pct_passing_10pct,
        pct_passing_10pct_mi
      });
      console.log();
    }
  ),
  csv.format({ headers: true }),
  process.stdout,
  err => {
    if (err) {
      console.error(err);
      process.exit(1);
    }
  }
);
