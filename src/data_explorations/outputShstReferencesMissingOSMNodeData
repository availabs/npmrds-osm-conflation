#!/usr/bin/env node

const { join } = require('path');
const { pipe, through } = require('mississippi');

const levelup = require('levelup');
const leveldown = require('leveldown');
const encode = require('encoding-down');

const CONFLATION_MAP_DB = join(__dirname, '../../data/leveldb/conflationMap/');

const conflationMapDB = levelup(
  encode(leveldown(CONFLATION_MAP_DB), { valueEncoding: 'json' })
);

const geoJSONOpen =
  '{"type":"FeatureCollection","name":"shstRefs with no-data OSM Nodes","crs":{"type":"name","properties":{"name":"urn:ogc:def:crs:OGC:1.3:CRS84"}},"features":[';

const geoJSONClose = ']}';

let preDelim = '';

const outputRestrictions = () =>
  new Promise((resolve, reject) =>
    pipe(
      conflationMapDB.createValueStream({}),
      through.obj(
        async function writer(feature, $, cb) {
          const {
            properties: { state, osmMetadata: { waySections = null } = {} } = {}
          } = feature;

          console.warn(state);
          if (
            state &&
            Array.isArray(waySections) &&
            waySections.some(({ nodesCoords = [] }) =>
              nodesCoords.some(coords => coords === null)
            )
          ) {
            this.push(`${preDelim}${JSON.stringify(feature)}`);
            preDelim = ',';
          }

          return cb();
        },
        function flush(cb) {
          this.push(geoJSONClose);
          return cb();
        }
      ),
      process.stdout,
      err => {
        if (err) {
          return reject(err);
        }
        return resolve();
      }
    )
  );

(async () => {
  process.stdout.write(geoJSONOpen);
  try {
    await outputRestrictions();
  } catch (err) {
    console.error(err);
  }
})();
