#!/usr/bin/env node

/* eslint no-continue: 0, no-restricted-syntax: 0, no-param-reassign: 0, */

const _ = require('lodash');

const targetMapsSQLiteService = require('../services/targetMapsSQLiteService');
const shstTilesetSQLiteService = require('../services/shstTilesetSQLiteService');
const conflationMapSQLiteService = require('../services/conflationMapSQLiteService');
const rawOsmSQLiteService = require('../services/rawOsmSQLiteService');
const conflationOsmSQLiteService = require('../services/conflationOsmSQLiteService');

const targetMapNamesList = Array.prototype.concat(
  targetMapsSQLiteService.getTargetMapsList(),
  'osm'
);

let nodeIdSeq = 0;

// We need to use the raw OSM nodes, with their original IDs, to preserve the Restrictions.
//   FIXME: Get these nodes from the conflationMap osmMetadata rather than the raw OSM
const loadRawOsmNodes = () => {
  const iterator = shstTilesetSQLiteService.makeGeometryMetadataIterator();

  for (const { geometryFeature, metadata } of iterator) {
    const { geometry: { coordinates = null } = {} } = geometryFeature || {};

    const { osmMetadata: { waySections = null } = {} } = metadata || {};

    const nodeIds = _(waySections)
      .map('nodeIds')
      .flatten()
      .value()
      .reduce((acc, nodeId) => {
        if (nodeId !== _.last(acc)) {
          acc.push(nodeId);
        }
        return acc;
      }, []);

    nodeIdSeq = Math.max(nodeIdSeq, ...nodeIds);

    if (nodeIds.length !== coordinates.length) {
      throw new Error(
        'ERROR: INVARIANT BROKEN. Number of nodeIds !== number of geometry vertices.'
      );
    }

    for (let i = 0; i < nodeIds.length; ++i) {
      const id = nodeIds[i];
      const [lon, lat] = coordinates[i];

      conflationOsmSQLiteService.insertNode({ id, lon, lat });
    }
  }
};

const validateMatchedWay = feature => {
  const {
    properties: {
      osmMetadata: { waySection: { nodeIds = null } = {} } = {}
    } = {},
    geometry: { coordinates = null } = {}
  } = feature || {};

  if (!Array.isArray(nodeIds)) {
    throw new Error(
      'ERROR: INVARIANT BROKEN. No OSM nodeIds for split ShSt Reference'
    );
  }

  if (!Array.isArray(coordinates)) {
    throw new Error(
      'ERROR: INVARIANT BROKEN. No coordinates for split ShSt Reference'
    );
  }

  if (nodeIds.length !== coordinates.length) {
    throw new Error(
      'ERROR: INVARIANT BROKEN. Number of OSM nodeIds !== number of vertices in geometry.'
    );
  }

  if (nodeIds.slice(1, -1).some(nodeId => nodeId === null)) {
    throw new Error(
      'ERROR: INVARIANT BROKEN. Internal nodes/vertices can not be synthetic (created during splitting).'
    );
  }
};

const loadConflationGeneratedOsmNodes = conflationMapFeature => {
  const {
    properties: {
      osmMetadata: { waySection: { nodeIds = null } = {} } = {}
    } = {},
    geometry: { coordinates = null } = {}
  } = conflationMapFeature || {};

  // If node/vertex was added to shstRefernceGeometry for splitting
  if (_.first(nodeIds) === null) {
    const [lon, lat] = _.first(coordinates);

    let id = conflationOsmSQLiteService.getNodeIdByCoordinates({ lon, lat });

    if (id !== null) {
      nodeIds[0] = id;
    } else {
      id = Math.floor(++nodeIdSeq);
      conflationOsmSQLiteService.insertNode({ id, lon, lat });
      nodeIds[0] = id;
    }
  }

  // If node/vertex was added to shstRefernceGeometry for splitting
  if (_.last(nodeIds) === null) {
    const [lon, lat] = _.last(coordinates);
    const lastNodeIdx = nodeIds.length - 1;

    let id = conflationOsmSQLiteService.getNodeIdByCoordinates({ lon, lat });

    if (id !== null) {
      nodeIds[lastNodeIdx] = conflationOsmSQLiteService.getNodeIdByCoordinates({
        lon,
        lat
      });
    } else {
      id = Math.floor(++nodeIdSeq);
      conflationOsmSQLiteService.insertNode({ id, lon, lat });
      nodeIds[lastNodeIdx] = id;
    }
  }
};

const loadConflationGeneratedOsmWay = conflationMapFeature => {
  const {
    id: conflationMapId, // The auto-incremented INTEGER primary key.
    properties: {
      osm: { targetMapId: rawOsmWayId },
      osmMetadata: { waySection: { nodeIds = null } = {} } = {}
    } = {}
  } = conflationMapFeature || {};

  // NEED to use the OSM targetMapId
  const rawOsmWay = rawOsmSQLiteService.getWayById(rawOsmWayId);
  const rawOsmWayMetadata = rawOsmWay && _.omit(rawOsmWay.tags, ['oneway']);

  // NEED to add _id suffix
  const conflationMatchedTargetMapMetadata = _(conflationMapFeature.properties)
    .pick(targetMapNamesList)
    .reduce(
      (acc, metadata, targetMapName) =>
        Object.assign(acc, {
          [`${targetMapName}_id`]: metadata.conflationMapMatchedTargetMapId,
          [`${targetMapName}_idx`]: metadata.conflationMapMatchedTargetMapIdx
        }),
      {}
    );

  const conflationWay = {
    id: conflationMapId,
    nodes: nodeIds,
    rawOsmWayId,
    tags: Object.assign(
      {},
      rawOsmWayMetadata,
      _.mapKeys(
        _.omit(
          conflationMapFeature.properties,
          Array.prototype.concat(
            ['osmMetadata', 'fsystem', 'oneway', 'oneWay'],
            targetMapNamesList // Removes the metadata objects to keep tag values scalar.
          )
        ),
        (v, k) => `conflation_map:${k}`
      ),
      conflationMatchedTargetMapMetadata,
      { oneway: 'yes' }
    )
  };

  conflationOsmSQLiteService.insertWay(conflationWay);
};

// Need to insert ways that were not paired to NPMRDS or RIS.
const loadConflationGeneratedOsmNodesAndWays = () => {
  const iterator = conflationMapSQLiteService.makeConflationMapFeatureIterator();

  for (const conflationMapFeature of iterator) {
    try {
      validateMatchedWay(conflationMapFeature);
    } catch (err) {
      console.error(err);
      continue;
    }

    loadConflationGeneratedOsmNodes(conflationMapFeature);

    loadConflationGeneratedOsmWay(conflationMapFeature);
  }
};

// TODO: Show that Shst did not mutate the underlying OSM nodes for the shst intersections.
const loadRestrictions = () => {
  let restrictionIdSeq = 0;

  const iterator = rawOsmSQLiteService.makeRestrictionsIterator();

  for (const { members: rawRestrictionMembers, restriction } of iterator) {
    if (_.isNil(rawRestrictionMembers) || _.isNil(restriction)) {
      continue;
    }

    const {
      from: rawFromWayId,
      via: rawViaNodeId,
      to: rawToWayId
    } = rawRestrictionMembers;

    if (_.isNil(rawFromWayId) || _.isNil(rawViaNodeId) || _.isNil(rawToWayId)) {
      continue;
    }

    const conflationFromWayId = conflationOsmSQLiteService.getWayIdByEndNodeAndRawOsmWayId(
      {
        rawOsmWayId: rawFromWayId,
        endNode: rawViaNodeId
      }
    );

    const conflationToWayId = conflationOsmSQLiteService.getWayIdByStartNodeAndRawOsmWayId(
      {
        rawOsmWayId: rawToWayId,
        startNode: rawViaNodeId
      }
    );

    if (!_.isNil(conflationFromWayId) && !_.isNil(conflationToWayId)) {
      conflationOsmSQLiteService.insertRestriction({
        id: ++restrictionIdSeq,
        members: {
          from: conflationFromWayId,
          via: rawViaNodeId,
          to: conflationToWayId
        },
        restriction
      });
    }
  }
};

loadRawOsmNodes();
loadConflationGeneratedOsmNodesAndWays();
loadRestrictions();
