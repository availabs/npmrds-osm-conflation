#!/usr/bin/env node

/* eslint no-param-reassign: 0, no-restricted-syntax: 0, no-await-in-loop: 0 */

const conflationOsmSQLiteService = require('../services/conflationOsmSQLiteService');

// This script was crashing because of Heap out of memory.
//   Using the V8 inspector it became clear that an Array of TickObjects was the cause.
//
//   I found this StackOverflow post: https://stackoverflow.com/a/34278415
//
//   >  On each write, an afterWrite clean up function is being queued up as a TickObject each time.
//   >  As we never leave the Tick/context we're in, this just amass till node explodes.
//   >  Solution? Make any long/forever running code blocks asynchronous with ticks as well.
//
// The solution wihin this module:
const tickContextBreaker = () => new Promise(resolve => process.nextTick(resolve))

const outputNodes = async () => {
  const iterator = conflationOsmSQLiteService.makeNodesIterator();

  for (const { id, lon, lat } of iterator) {
    console.log(
      `  <node id="${id}" version="-1" timestamp="1969-12-31T23:59:59Z" changeset="-1" lat="${lat}" lon="${lon}"/>`
    );
    await tickContextBreaker()
  }
};

const outputRestrictions = async () => {
  const iterator = conflationOsmSQLiteService.makeRestrictionsIterator();

  for (const {
    id,
    members: { via, to, from },
    restriction
  } of iterator) {
    console.log(`  <relation id="${id}" version="-1" timestamp="1969-12-31T23:59:59Z" changeset="-1">
    <member type="node" ref="${via}" role="via"/>
    <member type="way" ref="${to}" role="to"/>
    <member type="way" ref="${from}" role="from"/>
    <tag k="type" v="restriction"/>
    <tag k="restriction" v="${restriction}"/>
  </relation>`);

    await tickContextBreaker()
  }
};

const outputWays = async () => {
  const iterator = conflationOsmSQLiteService.makeWaysIterator();

  for (const { id, nodes, tags } of iterator) {
    console.log(
      `  <way id="${id}" version="-1" timestamp="1969-12-31T23:59:59Z" changeset="-1">`
    );

    for (let i = 0; i < nodes.length; ++i) {
      console.log(`    <nd ref="${nodes[i]}"/>`);
    }

    Object.keys(tags).forEach(k => {
      let v = tags[k];
      if (typeof v === 'string') {
        v = v.replace(/<|>|&|"/g, '');
      }
      console.log(`    <tag k="${k}" v="${v}"/>`);
    });

    console.log(`  </way>`);
    await tickContextBreaker()
  }
};

(async () => {
  console.log(`<?xml version="1.0" encoding="UTF-8"?>
  <osm version="0.6" generator="AVAIL Network Conflation Tool">
    <bounds minlon="-74.26890" minlat="42.41979" maxlon="-73.67937" maxlat="42.82377" origin="http://www.openstreetmap.org/api/0.6"/>`);

  await outputNodes();
  await outputRestrictions();
  await outputWays();

  console.log(`</osm>`);
})()
