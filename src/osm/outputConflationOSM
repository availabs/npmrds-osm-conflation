#!/usr/bin/env node

/* eslint no-param-reassign: 0, no-restricted-syntax: 0 */

const conflationOsmSQLiteService = require('../services/conflationOsmSQLiteService');

const outputNodes = () => {
  const iterator = conflationOsmSQLiteService.makeNodesIterator();

  for (const { id, lon, lat } of iterator) {
    process.stdout.write(`
  <node id="${id}" version="-1" timestamp="1969-12-31T23:59:59Z" changeset="-1" lat="${lat}" lon="${lon}"/>`);
  }
};

const outputRestrictions = () => {
  const iterator = conflationOsmSQLiteService.makeRestrictionsIterator();

  for (const { id, via, to, from, restriction } of iterator) {
    process.stdout.write(`
  <relation id="${id}" version="-1" timestamp="1969-12-31T23:59:59Z" changeset="-1">
    <member type="node" ref="${via}" role="via"/>
    <member type="way" ref="${to}" role="to"/>
    <member type="way" ref="${from}" role="from"/>
    <tag k="type" v="restriction"/>
    <tag k="restriction" v="${restriction}"/>
  </relation>`);
  }
};

const outputWays = () => {
  const iterator = conflationOsmSQLiteService.makeWaysIterator();

  for (const { id, nodes, tags } of iterator) {
    process.stdout.write(`
  <way id="${id}" version="-1" timestamp="1969-12-31T23:59:59Z" changeset="-1">`);

    for (let i = 0; i < nodes.length; ++i) {
      process.stdout.write(`
    <nd ref="${nodes[i]}"/>`);
    }

    Object.keys(tags).forEach(k => {
      let v = tags[k];
      if (typeof v === 'string') {
        v = v.replace(/<|>|&|"/g, '');
      }
      process.stdout.write(`
    <tag k="${k}" v="${v}"/>`);
    });

    process.stdout.write(`
  </way>`);
  }
};

process.stdout.write(`<?xml version="1.0" encoding="UTF-8"?>
<osm version="0.6" generator="AVAIL Network Conflation Tool">
  <bounds minlon="-74.26890" minlat="42.41979" maxlon="-73.67937" maxlat="42.82377" origin="http://www.openstreetmap.org/api/0.6"/>`);

outputNodes();
outputRestrictions();
outputWays();

process.stdout.write(`
</osm>`);
