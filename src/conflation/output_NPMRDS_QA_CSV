#!/usr/bin/env node

const { readFileSync, readdirSync } = require('fs');
const { join } = require('path');
const { pipe, through } = require('mississippi');
const turf = require('@turf/turf');
const _ = require('lodash');

const levelup = require('levelup');
const leveldown = require('leveldown');
const encode = require('encoding-down');

const MILES = { units: 'miles' };

const CONFLATION_PAIRINGS_DB = join(
  __dirname,
  '../../data/leveldb/',
  'conflationPairingsDB'
);

const conflationPairingsDB = levelup(
  encode(leveldown(CONFLATION_PAIRINGS_DB), {
    valueEncoding: 'json'
  })
);

const tmcIsPrimary = JSON.parse(
  readFileSync(join(__dirname, './tmc_isprimary.json'))
);

const shapefilesDir = join(__dirname, '../../data/npmrds/county_geojson');

const getConflationStats = () => {
  const conflationStats = {};
  return new Promise((resolve, reject) =>
    pipe(
      conflationPairingsDB.createValueStream(),
      through.obj(function writer(feature, $, cb) {
        const tmc = feature.properties.NPMRDS;

        if (tmc) {
          conflationStats[tmc] = conflationStats[tmc] || {};

          conflationStats[tmc].length = conflationStats[tmc].length || 0;
          conflationStats[tmc].length += turf.length(feature, MILES);
        }

        return cb();
      }),
      err => {
        if (err) {
          return reject(err);
        }
        return resolve(conflationStats);
      }
    )
  );
};

(async () => {
  try {
    const conflationStats = await getConflationStats();

    const shapefiles = readdirSync(shapefilesDir);

    process.stdout.write(
      'tmc,county,is_primary,is_paired,shp_length,conflation_length,len_diff_ratio\n'
    );

    for (let i = 0; i < shapefiles.length; ++i) {
      const shapefileName = shapefiles[i];

      const tmcShapeFile = JSON.parse(
        readFileSync(
          join(__dirname, '../../data/npmrds/county_geojson/', shapefileName)
        )
      );

      for (let j = 0; j < tmcShapeFile.features.length; ++j) {
        const feature = tmcShapeFile.features[j];
        const {
          properties: { tmc, county }
        } = feature;

        const is_primary = tmcIsPrimary[tmc] !== 0;
        const is_paired = conflationStats[tmc] !== undefined;
        const shp_length = _.round(turf.length(feature, MILES), 5);
        const conflation_length = conflationStats[tmc]
          ? _.round(conflationStats[tmc].length, 5)
          : 0;
        const len_diff_ratio = is_paired
          ? _.round((shp_length - conflation_length) / shp_length, 5)
          : '';

        process.stdout.write(
          `${tmc},${county},${is_primary},${is_paired},${shp_length},${conflation_length},${len_diff_ratio}\n`
        );
      }
    }
  } catch (err) {
    if (err) {
      console.error('ERROR');
      console.error(err);
    }
  }
})();
