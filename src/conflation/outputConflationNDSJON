#!/usr/bin/env node

/* eslint no-restricted-syntax: 0 */

// https://github.com/sharedstreets/sharedstreets-ref-system#core-concepts

const conflationMapSQLiteService = require('../services/conflationMapSQLiteService');

const { shstOsmWayRoadClassRankings } = require('./constants');

let outputFeatureId = 0;

const iterator = conflationMapSQLiteService.makeConflationMapFeatureIterator();

for (const feature of iterator) {
  const {
    id: conflationMapFeatureId,
    properties: {
      osm,
      npmrds_2017,
      npmrds_2019,
      ris_2019,
      segmentIndex,
      totalSegments,
      osmMetadata
    }
  } = feature;

  feature.id = ++outputFeatureId;

  const { roadClass = 'Other', oneWay = false } = osmMetadata || {};

  let networklevel = shstOsmWayRoadClassRankings[roadClass];

  if (oneWay) {
    networklevel += 0.5;
  }

  feature.properties = {
    id: feature.id,
    osm,
    split_seg: `${segmentIndex}:${totalSegments}`,
    networklevel
  };

  if (npmrds_2017) {
    feature.properties.tmc_2017 = npmrds_2017;

    feature.properties.tmc2017idx =
      conflationMapSQLiteService.getConflationMapSegIndexForTargetMapSegment(
        'npmrds_2017',
        conflationMapFeatureId
      ) || null;
  }

  if (npmrds_2019) {
    feature.properties.tmc_2019 = npmrds_2019;

    feature.properties.tmc2019idx =
      conflationMapSQLiteService.getConflationMapSegIndexForTargetMapSegment(
        'npmrds_2019',
        conflationMapFeatureId
      ) || null;
  }

  if (ris_2019) {
    feature.properties.ris_2019 = ris_2019.replace(/##/g, '|');

    feature.properties.ris2019idx =
      conflationMapSQLiteService.getConflationMapSegIndexForTargetMapSegment(
        'ris_2019',
        conflationMapFeatureId
      ) || null;
  }

  console.log(JSON.stringify(feature));
}
