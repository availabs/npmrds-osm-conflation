#!/usr/bin/env node

/* eslint no-restricted-syntax: 0, no-await-in-loop: 0 */

const _ = require('lodash');

const targetMapsSQLiteService = require('../services/targetMapsSQLiteService');
const conflationMapSQLiteService = require('../services/conflationMapSQLiteService');

const targetMaps = Array.prototype.concat(
  targetMapsSQLiteService.getTargetMapsList(),
  'osm'
);

const iterator = conflationMapSQLiteService.makeConflationMapFeatureIterator();

(async () => {
  for (const feature of iterator) {
    const {
      id,
      properties: { segmentIndex, totalSegments, networklevel }
    } = feature;

    const newProps = {
      id,
      split_seg: `${segmentIndex}:${totalSegments}`,
      networklevel
    };

    Object.assign(feature.properties);

    for (let i = 0; i < targetMaps.length; ++i) {
      const targetMap = targetMaps[i];
      const abbreviatedTargetMapName = targetMap
        .replace(/npmrds_20/, 'tmc') // npmrds_2019 -> tmc19
        .replace(/ris_20/, 'ris');

      const targetMapMetadata = feature.properties[targetMap];

      if (!_.isNil(targetMapMetadata)) {
        const {
          conflationMapMatchedTargetMapId,
          conflationMapMatchedTargetMapIdx
        } = targetMapMetadata;

        if (!_.isNil(conflationMapMatchedTargetMapId)) {
          newProps[
            `${abbreviatedTargetMapName}id`
          ] = conflationMapMatchedTargetMapId;
          newProps[
            `${abbreviatedTargetMapName}idx`
          ] = conflationMapMatchedTargetMapIdx;
        } else {
          newProps[`${abbreviatedTargetMapName}id`] = null;
          newProps[`${abbreviatedTargetMapName}idx`] = null;
        }
      }
    }

    feature.properties = newProps;

    console.log(JSON.stringify(feature));

    // https://stackoverflow.com/a/34278415
    await new Promise(resolve => process.nextTick(resolve));
  }
})();
