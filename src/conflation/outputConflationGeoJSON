#!/usr/bin/env node

/* eslint no-param-reassign: 0 */

const { join } = require('path');
const { pipe, through } = require('mississippi');

const levelup = require('levelup');
const leveldown = require('leveldown');
const encode = require('encoding-down');

const dbsParentDir = join(__dirname, '../../data/leveldb/');
const JSON_ENC = { valueEncoding: 'json' };

const CONFLATION_FEATURES_DIR = join(dbsParentDir, 'conflationFeatures');

const conflationFeaturesDB = levelup(
  encode(leveldown(CONFLATION_FEATURES_DIR), JSON_ENC)
);
const geoJSONOpen =
  '{"type":"FeatureCollection","name":"networkconflation","crs":{"type":"name","properties":{"name":"urn:ogc:def:crs:OGC:1.3:CRS84"}},"features":[';

const geoJSONClose = ']}';

let preDelim = '';

const outputFeatures = () =>
  new Promise((resolve, reject) =>
    pipe(
      conflationFeaturesDB.createValueStream(),
      through.obj(async function writer(feature, $, cb) {
        this.push(`${preDelim}${JSON.stringify(feature)}`);
        preDelim = ',';
        return cb();
      }),
      process.stdout,
      err => {
        if (err) {
          return reject(err);
        }
        return resolve();
      }
    )
  );

(async () => {
  try {
    process.stdout.write(geoJSONOpen);
    await outputFeatures();
    process.stdout.write(geoJSONClose);
  } catch (err) {
    console.error(err);
    process.exit(1);
  }
})();
