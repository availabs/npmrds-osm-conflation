#!/usr/bin/env node

const { join } = require('path');
const { pipe, through } = require('mississippi');

const levelup = require('levelup');
const leveldown = require('leveldown');
const encode = require('encoding-down');

const SHST_GEOGRAPHY_DB = join(
  __dirname,
  '../../data/sharedstreets/shst_tiles_leveldb/shstGeographyDB'
);

const CONFLATION_PAIRINGS_DB = join(__dirname, 'conflationPairingsDB');

const shstGeographyDB = levelup(
  encode(leveldown(SHST_GEOGRAPHY_DB), { valueEncoding: 'json' })
);

const conflationPairingsDB = levelup(
  encode(leveldown(CONFLATION_PAIRINGS_DB), {
    valueEncoding: 'json'
  })
);

const geoJSONOpen =
  '{"type":"FeatureCollection","name":"networkconflation","crs":{"type":"name","properties":{"name":"urn:ogc:def:crs:OGC:1.3:CRS84"}},"features":[';

const geoJSONClose = ']}';

let preDelim = '';

const seenGeomIds = new Set();

const outputPairedShStGeoms = () =>
  new Promise((resolve, reject) =>
    pipe(
      conflationPairingsDB.createReadStream(),
      through.obj(async function writer(
        { key: geomId, value: feature },
        $,
        cb
      ) {
        if (!seenGeomIds.has(geomId)) {
          seenGeomIds.add(geomId.replace(/\..*/, ''));
          process.stdout.write(`${preDelim}${JSON.stringify(feature)}`);
          preDelim = ',';
        }

        return cb();
      }),
      err => {
        console.error('FOO');
        if (err) {
          return reject(err);
        }
        return resolve();
      }
    )
  );

const outputUnpairedShStGeoms = () =>
  new Promise((resolve, reject) =>
    pipe(
      shstGeographyDB.createReadStream(),
      through.obj(async function writer(
        { key: geomId, value: feature },
        $,
        cb
      ) {
        if (!seenGeomIds.has(geomId)) {
          seenGeomIds.add(geomId);
          process.stdout.write(`${preDelim}${JSON.stringify(feature)}`);
          preDelim = ',';
        }

        return cb();
      }),
      err => {
        if (err) {
          return reject(err);
        }
        return resolve();
      }
    )
  );

(async () => {
  try {
    process.stdout.write(geoJSONOpen);
    console.error(1);
    await outputPairedShStGeoms();
    console.error(2);
    // await outputUnpairedShStGeoms();
    console.error(3);
    console.log(geoJSONClose);
    console.error(4);
  } catch (err) {
    console.error(err);
    process.exit(1);
  }
})();
