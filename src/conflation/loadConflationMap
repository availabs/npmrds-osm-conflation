#!/usr/bin/env node

/* eslint no-restricted-syntax: 0, no-continue: 0, no-await-in-loop: 0 */

const shstReferencesMatchesDAO = require('../daos/shstReferencesMatchesDAO');
const conflationMapDAO = require('../daos/conflationMapDAO');

const getShstReferenceAuxProperties = require('./getShstReferenceAuxProperties');
const getShstMatchedSegmentOffsetsByTargetMap = require('./getShstMatchedSegmentOffsetsByTargetMap');

const partitionShstReferenceByTargetMapsMatches = require('./partitionShstReferenceByTargetMapsMatches');

const conflationMapSQLiteService = require('../services/conflationMapSQLiteService');

const createPartitions = async () => {
  let conflationMapFeatureId = 0;

  const iterator = shstReferencesMatchesDAO.makeShStReferenceFeatureWithMatchesIterator();

  for (const { shstReferenceFeature, shstMatchesByTargetMap } of iterator) {
    const { id: shstRefId } = shstReferenceFeature;

    const shstReferenceAuxProperties = getShstReferenceAuxProperties(
      shstReferenceFeature
    );

    const shstMatchedSegmentOffsetsByTargetMap = getShstMatchedSegmentOffsetsByTargetMap(
      {
        shstReferenceFeature,
        shstReferenceAuxProperties,
        shstMatchesByTargetMap
      }
    );

    const shstReferencePartitions = partitionShstReferenceByTargetMapsMatches({
      shstReferenceFeature,
      shstReferenceAuxProperties,
      shstMatchedSegmentOffsetsByTargetMap
    });

    if (shstReferencePartitions) {
      // Assign IDs to the features.
      for (let i = 0; i < shstReferencePartitions.length; ++i) {
        const partition = shstReferencePartitions[i];

        partition.id = ++conflationMapFeatureId;
        partition.properties.shstRefId = shstRefId;
      }

      conflationMapSQLiteService.insertConflationMapFeatures(
        shstReferencePartitions
      );
    } else {
      console.error(
        `Segment splitting failed for SharedStreets Reference ${shstRefId}`
      );
    }

    await new Promise(resolve => process.nextTick(resolve));
  }
};

(async () => {
  await createPartitions();
  conflationMapDAO.initializeConflationMapSegIdxLookupTables();
})();
