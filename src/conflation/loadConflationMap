#!/usr/bin/env node

/* eslint no-restricted-syntax: 0, no-continue: 0 */

const _ = require('lodash');

const dao = require('../daos/shstReferencesMatchesDAO');

const getShstReferenceAuxProperties = require('./getShstReferenceAuxProperties');
const getShstMatchedSegmentOffsetsByTargetMap = require('./getShstMatchedSegmentOffsetsByTargetMap');

const partitionShstReferenceByTargetMapsMatches = require('./partitionShstReferenceByTargetMapsMatches');

const conflationMapSQLiteService = require('../services/conflationMapSQLiteService');

(async () => {
  const iterator = dao.makeShStReferenceFeatureWithMatchesAsyncIterator();

  for await (const {
    shstReferenceFeature,
    shstMatchesByTargetMap
  } of iterator) {
    const { id } = shstReferenceFeature;

    // FIXME: We need to output this segment with just the OSM wayIds in this case.
    if (_.isEmpty(shstMatchesByTargetMap)) {
      continue;
    }

    const shstReferenceAuxProperties = getShstReferenceAuxProperties(
      shstReferenceFeature
    );

    const shstMatchedSegmentOffsetsByTargetMap = getShstMatchedSegmentOffsetsByTargetMap(
      {
        shstReferenceFeature,
        shstReferenceAuxProperties,
        shstMatchesByTargetMap
      }
    );

    const shstReferencePartitions = partitionShstReferenceByTargetMapsMatches({
      shstReferenceFeature,
      shstReferenceAuxProperties,
      shstMatchedSegmentOffsetsByTargetMap
    });

    if (shstReferencePartitions) {
      conflationMapSQLiteService.insertConflationMapFeatures(
        shstReferencePartitions
      );
    } else {
      console.error(`NO MAPPINGS FOR SHST_REF_ID=${id}`);
    }
  }
})();
