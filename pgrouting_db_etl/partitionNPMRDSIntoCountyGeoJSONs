#!/usr/bin/env node

const { exec } = require('child_process');
const { openSync, appendFileSync, closeSync } = require('fs');
const { join } = require('path');
const split = require('split2');
const { pipe, through } = require('mississippi');
const yargs = require('yargs');
const { sync: mkdirpSync } = require('mkdirp');

const cliArgsSpec = {
  npmrdsShapefile: {
    demand: true,
    type: 'string',
    description:
      'Path to the NPMRDS shapefile.'
  },
  outDir: {
    demand: true,
    type: 'string',
    description:
      'The directory into which to write the county geojson files. Creates directory if it does not exist.'
  }
};

const { argv } = yargs
  .strict()
  .parserConfiguration({
    'camel-case-expansion': false,
    'flatten-duplicate-arrays': false
  })
  .wrap(yargs.terminalWidth() / 1.618)
  .option(cliArgsSpec)
  .usage(
    `Creates County partitions of the NPMRDS shapefile.
    One GeoJSON file is created per county.
    GeoJSON files are written into the specified --outDir directory.

    USAGE:
      ogr2ogr -f GeoJSON /vsistdout/ -t_srs data/npmrds/inrix_expanded |
        jq -c '.features[]' |
        ./partitionNPMRDSIntoCountyGeoJSONs --outDir foo
    `
  );

const { npmrdsShapefile, outDir } = argv;

mkdirpSync(outDir);

const cmd = `ogr2ogr -f GeoJSON /vsistdout/ ${npmrdsShapefile} -t_srs 'EPSG:4326' | jq -c '.features[]'`;

console.error(cmd);

const { stdout: npmrdsFeatureStream } = exec(cmd, {
  //  maxBuffer
  //    Largest amount of data in bytes allowed on stdout or stderr.
  //    If exceeded, the child process is terminated and any output is truncated.
  //
  //  Better to crash hard on out of memory than to get cryptic "pipe closed prematurely" error.
  maxBuffer: Infinity
});

const countyPartitionFDs = {};

const geoJSONHeader =
  '{"type":"FeatureCollection","name":"npmrds_shapefile","crs":{"type":"name","properties":{"name":"urn:ogc:def:crs:OGC:1.3:CRS84"}},"features":['

pipe(
  npmrdsFeatureStream,
  split(),
  through(
    function countyPartitioner(feature, _, cb) {
      const {
        properties: { County }
      } = JSON.parse(feature.toString());

      if (!County) {
        throw new Error(
          'ERROR: Empty County field for TMC entry.'
        );
      }

      const normalizedCountyName = County.toLowerCase().replace(/ /, '_');

      let fd = countyPartitionFDs[normalizedCountyName];
      if (!fd) {
        const outf = join(outDir, `npmrds.${normalizedCountyName}.geojson`);
        fd = openSync(outf, 'a');

        countyPartitionFDs[normalizedCountyName] = fd;

        appendFileSync(fd, `${geoJSONHeader}${feature}`, 'utf8');
      } else {
        appendFileSync(fd, `,${feature}`, 'utf8');
      }

      return cb();
    },
    function finish(cb) {
      Object.keys(countyPartitionFDs).forEach(County => {
        const fd = countyPartitionFDs[County];

        appendFileSync(fd, ']}');

        closeSync(fd);
      });

      console.error('done');
      return cb();
    }
  ),
  err => {
    if (err) {
      console.error(err);
    }
  }
);
