#!/usr/bin/env node

/* eslint no-await-in-loop: 0 */
// https://github.com/sharedstreets/sharedstreets-ref-system#core-concepts

const { readdirSync, createWriteStream } = require('fs');
const { spawn } = require('child_process');
const { join } = require('path');
const { pipe, through } = require('mississippi');
const split = require('split2');
const { uniq } = require('lodash');
const { conflator } = require('sharedstreets-conflator');
const request = require('request');

const yargs = require('yargs');

const cliArgsSpec = {
  tilesetDir: {
    demand: true,
    type: 'string'
  },
  shstMatchedNpmrdsDir: {
    demand: true,
    type: 'string'
  },
  shstMatchedRisDir: {
    demand: true,
    type: 'string'
  }
};

const { argv } = yargs
  .strict()
  .parserConfiguration({
    'camel-case-expansion': false,
    'flatten-duplicate-arrays': false
  })
  .wrap(yargs.terminalWidth() / 1.618)
  .option(cliArgsSpec);

const TILE_HIERARCHY_LEVEL = 8;
const OSM_PLANET_VER = '181224';
const SHST_TILES_URL_BASE = `https://tiles.sharedstreets.io/osm/planet-${OSM_PLANET_VER}`;

const { tilesetDir, shstMatchedNpmrdsDir, shstMatchedRisDir } = argv;

const seenGeomTiles = new Set(
  readdirSync(tilesetDir).filter(f => f.match(/geometry\.\d+\.pbf$/))
);

const npmrdsMatchedGlob = join(shstMatchedNpmrdsDir, '*\\.matched.geojson');
const risMatchedGlob = join(shstMatchedRisDir, '*\\.matched.geojson');

const { stdout: matchedStream, stderr } = spawn(
  "jq --compact-output '.features[]'",
  [npmrdsMatchedGlob, risMatchedGlob],
  { shell: true }
);

stderr.pipe(process.stderr);

pipe(
  matchedStream,
  split(JSON.parse),
  through.obj(function getTileNames(feature, _, cb) {
    const tiles = uniq(
      [...conflator(feature, { zoom: 12 })].map(
        ({ tile: [x, y] }) =>
          `12-${x}-${y}.geometry.${TILE_HIERARCHY_LEVEL}.pbf`
      )
    ).filter(tile => !seenGeomTiles.has(tile));

    for (let i = 0; i < tiles.length; ++i) {
      this.push(tiles[i]);
    }

    return cb();
  }),
  through.obj(async function scraper(tileName, _, cb) {
    if (seenGeomTiles.has(tileName)) {
      console.log('has', tileName);
      return cb();
    }

    seenGeomTiles.add(tileName);

    console.error('scraping', tileName);

    await new Promise((resolve, reject) =>
      pipe(
        request(`${SHST_TILES_URL_BASE}/${tileName}`),
        createWriteStream(join(tilesetDir, tileName)),
        err => {
          if (err) {
            return reject(err);
          }

          return resolve();
        }
      )
    );

    return cb();
  }),
  err => {
    if (err) {
      console.error(err);
      process.exit(1);
    }
  }
);
