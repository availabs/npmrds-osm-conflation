#!/usr/bin/env node

/* eslint no-unused-expressions: 0 */

const { readdirSync, createWriteStream, unlinkSync } = require('fs');
const { createGzip } = require('zlib');
const { pipe } = require('mississippi');
const { spawn } = require('child_process');
const { isAbsolute, basename, join } = require('path');

const yargs = require('yargs');

const TMC_IDENTIFICATION = 'TMC_Identification.csv';
const NPMRDS_SHAPEFILE_ZIP = 'npmrds_shapefile.zip';

const METADATA_TO_NDJSON = join(__dirname, './createNpmrdsNDJSON');

const getAbsPath = path =>
  isAbsolute(path) ? path : join(process.cwd(), path);

const getNpmrdsNdjsonFileName = year => `npmrds.${year}.ndjson.gz`;

const createMetadataNDJSON = yearSubDir =>
  new Promise((resolve, reject) => {
    const year = basename(yearSubDir);
    const outFileBaseName = getNpmrdsNdjsonFileName(year);

    const outFilePath = join(yearSubDir, outFileBaseName);

    const outFileStream = createWriteStream(outFilePath, { emitClose: true });

    const subprocess = spawn(`${METADATA_TO_NDJSON}`, [
      `--tmc_identification=${join(yearSubDir, TMC_IDENTIFICATION)}`,
      `--npmrds_shapefile_zip=${join(yearSubDir, NPMRDS_SHAPEFILE_ZIP)}`
    ]);

    pipe(
      subprocess.stderr,
      process.stderr
    );

    pipe(
      subprocess.stdout,
      createGzip({ level: 9 }),
      outFileStream,
      err => {
        if (err) {
          console.error(err);
          unlinkSync(outFilePath);
          return reject();
        }
        return resolve;
      }
    );
  });

const getYearSubDirs = dir => {
  const yearSubDirs = readdirSync(dir, { withFileTypes: true })
    .filter(dirent => dirent.isDirectory() && /^\d{4}$/.test(dirent.name))
    .map(dirent => join(dir, dirent.name))
    .filter(subDirPath => {
      const subDirFiles = readdirSync(subDirPath, {
        withFileTypes: true
      })
        .filter(dirent => dirent.isFile())
        .map(({ name }) => name);

      const containsRequiredFiles =
        subDirFiles.includes(TMC_IDENTIFICATION) &&
        subDirFiles.includes(NPMRDS_SHAPEFILE_ZIP);

      if (!containsRequiredFiles) {
        console.warn(
          `WARNING: ${subDirPath} lacks the required files ${TMC_IDENTIFICATION} and ${NPMRDS_SHAPEFILE_ZIP}`
        );
        return false;
      }
      return true;
    });

  return yearSubDirs.length ? yearSubDirs : null;
};

const cliArgsSpec = {
  data_dir: {
    type: 'string',
    demand: true,
    description: 'The directory in which the NPMRDS data files are written.'
  }
};

const { argv } = yargs
  .strict()
  .parserConfiguration({
    'camel-case-expansion': false,
    'flatten-duplicate-arrays': false
  })
  .wrap(yargs.terminalWidth() / 1.618)
  .option(cliArgsSpec);

const { data_dir } = argv;

(async () => {
  try {
    const dir = getAbsPath(data_dir);
    const yearSubDirs = getYearSubDirs(dir);

    if (!Array.isArray(yearSubDirs)) {
      throw new Error(`ERROR: no valid year subdirectories in ${dir}`);
    }

    await Promise.all(
      yearSubDirs.map(yearSubDir => createMetadataNDJSON(yearSubDir))
    );
  } catch (err) {
    console.error(err);
  }
})();
