#!/usr/bin/env node

const { exec, execSync } = require('child_process');
const { isAbsolute, join, dirname, basename } = require('path');
const yargs = require('yargs');
const { pipe, through } = require('mississippi');
const split = require('split2');
const _ = require('lodash');
const csv = require('fast-csv');

const cliArgsSpec = {
  tmc_identification: {
    demand: true,
    type: 'string'
  },
  npmrds_shapefile_zip: {
    demand: true,
    type: 'string'
  }
};

const { argv } = yargs
  .strict()
  .parserConfiguration({
    'camel-case-expansion': false,
    'flatten-duplicate-arrays': false
  })
  .wrap(yargs.terminalWidth() / 1.618)
  .option(cliArgsSpec);

const { tmc_identification, npmrds_shapefile_zip } = argv;

const validDirectionsRE = /N|NORTBOUND|E|EASTBOUND|S|SOUTHBOUND|W|WESTBOUND/i;

const getTmcMetadata = () => {
  const tmcMetadata = {};
  return new Promise((resolve, reject) =>
    pipe(
      csv.parseFile(tmc_identification, { headers: true, trim: true }),
      through.obj(async function loader(raw, $, cb) {
        const d = _.mapKeys(raw, (v, k) => k.toLowerCase());
        const { tmc } = d;

        tmcMetadata[tmc] = tmcMetadata[tmc] || {};

        if (
          tmcMetadata[tmc].direction &&
          !tmcMetadata[tmc].direction.match(validDirectionsRE)
        ) {
          tmcMetadata[tmc].direction = null;
        }

        Object.assign(
          tmcMetadata[tmc],
          // If this is not the first row for this TMC,
          //   omit empty properties,
          //   else include them to get a uniform schema.
          _.omitBy(d, (v, k) => _.isNil(v) && !_.isNil(tmcMetadata[tmc][k]))
        );

        return cb();
      }),
      err => {
        if (err) {
          return reject(err);
        }

        return resolve(tmcMetadata);
      }
    )
  );
};

const streamNDJSON = tmcMetadata => {
  const shpFileDir = dirname(npmrds_shapefile_zip);
  const shpFileName = basename(npmrds_shapefile_zip);
  const cwd = isAbsolute(shpFileDir)
    ? shpFileDir
    : join(process.cwd(), shpFileDir);

  // If the shapefile zip has a subdirectory, we need to get it for the ogr2ogr cli args.
  let subDir;

  try {
    const zipContents = execSync(`zipinfo -1 ${npmrds_shapefile_zip} "*/"`, {
      encoding: 'utf8',
      stdio: ['pipe', 'pipe', null]
    });

    subDir = `/${_(zipContents.split())
      .map(s => _.trim(s))
      .uniq()
      .sortBy(s => -s.length)
      .first()}`;
  } catch (err) {
    subDir = '';
  }

  return new Promise((resolve, reject) => {
    const { stdout: featuresStream, stderr } = exec(
      ` ogr2ogr \
          -f GeoJSON \
          -t_srs EPSG:4326 \
          /vsistdout/ \
          /vsizip/${shpFileName}${subDir} |
        jq -c --stream '
            fromstream(
              inputs |
              select( [.[0][0]] == ["features"]) |
              del(.[0][0:2])
            ) |
            select(.)
          ' |
        jq -s -c 'sort_by(.properties.tmc)[]'
      `,
      { cwd, maxBuffer: Infinity }
    );

    stderr.pipe(process.stderr);

    let curTmc;
    let tmcFeatureAcc;

    return pipe(
      featuresStream,
      split(JSON.parse),
      through.obj(
        function metadata_merger(raw_feature, $, cb) {
          const feature = Object.assign({}, raw_feature, {
            properties: _.mapKeys(raw_feature.properties, (v, k) =>
              k.toLowerCase()
            )
          });

          if (
            feature.direction &&
            !feature.direction.match(validDirectionsRE)
          ) {
            feature.direction = null;
          }

          const {
            properties: { tmc }
          } = feature;

          if (curTmc !== tmc) {
            if (!_.isNil(tmcFeatureAcc)) {
              this.push(`${JSON.stringify(tmcFeatureAcc)}\n`);
            }

            curTmc = tmc;
            tmcFeatureAcc = feature;
            tmcFeatureAcc.id = tmc;

            Object.assign(
              tmcFeatureAcc.properties,
              _.omitBy(
                tmcMetadata[tmc],
                (v, k) =>
                  (_.isNil(v) || v === '') && !_.isNil(feature.properties[k])
              )
            );
          } else {
            Object.assign(
              tmcFeatureAcc.properties,
              _.omitBy(
                feature.properties,
                (v, k) =>
                  (_.isNil(v) || v === '') &&
                  !_.isNil(tmcFeatureAcc.properties[k])
              )
            );

            if (
              feature.geometry.coordinates.length >
              tmcFeatureAcc.geometry.coordinates.length
            ) {
              tmcFeatureAcc.geometry = feature.geometry;
            }
          }

          return cb();
        },
        function flush(cb) {
          if (!_.isNil(tmcFeatureAcc)) {
            this.push(`${JSON.stringify(tmcFeatureAcc)}\n`);
          }

          return cb();
        }
      ),
      process.stdout,
      err => {
        if (err) {
          return reject(err);
        }

        return resolve();
      }
    );
  });
};

(async () => {
  const tmcMetadata = await getTmcMetadata();
  await streamNDJSON(tmcMetadata);
})();
