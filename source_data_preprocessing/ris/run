#!/usr/bin/env node

/* eslint no-unused-expressions: 0 */

const { readdirSync } = require('fs');
const { exec } = require('child_process');
const { promisify } = require('util');
const { isAbsolute, join } = require('path');

const yargs = require('yargs');

const execAsync = promisify(exec);

const RIS_GDB_ZIP = 'ris_gdb.zip';

const COUNTY_PARTITIONER = join(__dirname, './createRisCountyGeoJSONs');
const COUNTY_SUBPARTITIONER = join(
  __dirname,
  '../../bin/data_partitioning/partitionCountyGeoJSONsByBoundingBoxes'
);

const getAbsPath = path =>
  isAbsolute(path) ? path : join(process.cwd(), path);

const getYearSubDirs = dir => {
  const yearSubDirs = readdirSync(dir, { withFileTypes: true })
    .filter(dirent => dirent.isDirectory() && /^\d{4}$/.test(dirent.name))
    .map(dirent => join(dir, dirent.name))
    .filter(subDirPath => {
      const subDirFiles = readdirSync(subDirPath, {
        withFileTypes: true
      })
        .filter(dirent => dirent.isFile())
        .map(({ name }) => name);

      const containsRequiredFiles = subDirFiles.includes(RIS_GDB_ZIP);

      if (!containsRequiredFiles) {
        console.warn(
          `WARNING: ${subDirPath} lacks the required file ${RIS_GDB_ZIP}`
        );
        return false;
      }
      return true;
    });

  return yearSubDirs.length ? yearSubDirs : null;
};

const runCountyPartionScript = yearSubDir =>
  execAsync(
    `${COUNTY_PARTITIONER} \
        --ris_gdb_zip=${join(yearSubDir, RIS_GDB_ZIP)} \
        --output_dir=${join(yearSubDir, 'county_geojsons')}`
  );

const runCountySubPartitionScript = yearSubDir =>
  execAsync(
    `${COUNTY_SUBPARTITIONER} \
        ${join(yearSubDir, 'county_geojsons')} \
        ${join(yearSubDir, 'partitioned_county_geojsons')} \
    `
  );

yargs
  .parserConfiguration({
    'camel-case-expansion': false,
    'flatten-duplicate-arrays': false
  })
  .command({
    command: 'process_ris_metadata',
    desc: '',
    builder: {
      ris_data_dir: {
        type: 'string',
        demand: true,
        description:
          'The directory in which the Road Inventory System data files are written.'
      }
    },
    async handler({ ris_data_dir }) {
      try {
        const dir = getAbsPath(ris_data_dir);
        const yearSubDirs = getYearSubDirs(dir);

        if (!Array.isArray(yearSubDirs)) {
          throw new Error(`ERROR: no valid year subdirectories in ${dir}`);
        }

        const results = await Promise.all(
          yearSubDirs.map(yearSubDir => runCountyPartionScript(yearSubDir))
        );

        yearSubDirs.forEach((yearSubDir, i) =>
          console.log(
            JSON.stringify({
              year_sub_dir: yearSubDir,
              process_output: results[i]
            })
          )
        );

        const countySubPartitioningResults = await Promise.all(
          yearSubDirs.map(yearSubDir => runCountySubPartitionScript(yearSubDir))
        );

        yearSubDirs.forEach((yearSubDir, i) =>
          console.log(
            JSON.stringify({
              year_sub_dir: yearSubDir,
              process_output: countySubPartitioningResults[i]
            })
          )
        );
      } catch (err) {
        console.error(err);
      }
    }
  })
  .demandCommand()
  .recommendCommands()
  .strict()
  .wrap(yargs.terminalWidth() / 1.618).argv;
