#!/usr/bin/env node

const { readdirSync, createWriteStream } = require('fs');
const { spawn } = require('child_process');
const { isAbsolute, join } = require('path');

const yargs = require('yargs');

const RIS_GDB_ZIP = 'ris_gdb.zip';
const RIS_NDJSON_GZ = 'ris.ndjson.gz';

const getAbsPath = path =>
  isAbsolute(path) ? path : join(process.cwd(), path);

const getYearSubDirs = dir => {
  const yearSubDirs = readdirSync(dir, { withFileTypes: true })
    .filter(dirent => dirent.isDirectory() && /^\d{4}$/.test(dirent.name))
    .map(dirent => join(dir, dirent.name))
    .filter(subDirPath => {
      const subDirFiles = readdirSync(subDirPath, {
        withFileTypes: true
      })
        .filter(dirent => dirent.isFile())
        .map(({ name }) => name);

      const containsRequiredFiles = subDirFiles.includes(RIS_GDB_ZIP);

      if (!containsRequiredFiles) {
        console.warn(
          `WARNING: ${subDirPath} lacks the required file ${RIS_GDB_ZIP}`
        );
        return false;
      }
      return true;
    });

  return yearSubDirs.length ? yearSubDirs : null;
};

const writeNDJSONFile = yearSubDir =>
  new Promise((resolve, reject) => {
    const source = spawn(`${join(__dirname, './ris_geodatabase_to_ndjson')}`, [
      `${join(yearSubDir, RIS_GDB_ZIP)}`
    ]);

    // Compress the NDJSON
    const sink = spawn('gzip', ['-9']);

    const outFileStream = createWriteStream(join(yearSubDir, RIS_NDJSON_GZ));

    source.stdout.pipe(sink.stdin);
    sink.stdout.pipe(outFileStream);

    source.stderr.pipe(process.stderr);
    sink.stderr.pipe(process.stderr);

    source.once('exit', exit_code => {
      if (exit_code !== 0) {
        reject(new Error('Geodatabase dump to NDJSON failed.'));
      }
    });

    sink.once('exit', exit_code => {
      if (exit_code === 0) {
        resolve();
      } else {
        reject(new Error('Writing compressed NDJSON to file failed.'));
      }
    });
  });

const cliArgsSpec = {
  data_dir: {
    type: 'string',
    demand: true,
    description:
      'The directory in which the Road Inventory System data files are written.'
  }
};

const { argv } = yargs
  .strict()
  .parserConfiguration({
    'camel-case-expansion': false,
    'flatten-duplicate-arrays': false
  })
  .wrap(yargs.terminalWidth() / 1.618)
  .option(cliArgsSpec);

const { data_dir } = argv;

(async () => {
  try {
    const dir = getAbsPath(data_dir);
    const yearSubDirs = getYearSubDirs(dir);

    if (!Array.isArray(yearSubDirs)) {
      throw new Error(`ERROR: no valid year subdirectories in ${dir}`);
    }

    await Promise.all(
      yearSubDirs.map(yearSubDir => writeNDJSONFile(yearSubDir))
    );
  } catch (err) {
    console.error(err);
  }
})();
